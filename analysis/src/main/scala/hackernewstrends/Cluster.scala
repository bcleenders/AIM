package hackernewstrends

import org.apache.spark.SparkContext
import org.apache.spark.mllib.clustering.LDA
import org.apache.spark.mllib.linalg.{Vector, Vectors}
import org.apache.spark.rdd.RDD
import org.json4s.jackson.JsonMethods._
import org.json4s.{DefaultFormats, _}
import org.json4s.jackson.Serialization.writePretty

import scala.collection.mutable

object Cluster extends App {
  implicit val formats = DefaultFormats // Brings in default date formats etc.

  val jobId = 1
  val jobQuery = "2015-June-1"
  val jobDescription = "LDA on all articles from June 2015 with word stemming."
  // LDA parameters
  val numTopics = 50
  val maxIterations = 50
  val json = false
  val inputPath = "/home/aim3-team5/output_awesome/"
  val outputPath = s"/home/aim3-team5/lda/Experiment $jobId/"

  val sc = new SparkContext()

  // Load the stop words
  // List found on: http://jmlr.org/papers/volume5/lewis04a/a11-smart-stop-list/english.stop
  val stream = getClass.getResourceAsStream("/english.stop")
  val stopWords = sc.broadcast(scala.io.Source.fromInputStream(stream).getLines().toList)


  // Load all the files generated by the crawler and split each line (each line contains one article)
  // Get rid of weird characters and filter all the empty artciles (the ones that the crawler couldn't fetch)
  val corpus: RDD[Item] = sc.wholeTextFiles(inputPath + jobQuery).flatMap { case (_, file) =>
    file.split("\n").map(parse(_).extract[Item]).filter(_.webpage.cleanedText != "")
  }

  val tokenized =
    corpus
      .stem
      .map(item =>
      Tokenized(
        item._1,
        item._2
          .filter(_.length > 3) // Only words that are longer than 3 characters
          .filter(_.forall(java.lang.Character.isLetter)) // Only letters
          .filter(!stopWords.value.contains(_)) // Filter out the stop-words
          .map(_.toLowerCase) // convert everything to lowercase
      )
      )

  // Choose the vocabulary.

  //   termCounts: Sorted list of (term, termCount) pairs
  val termCounts: Array[(String, Long)] =
    tokenized
      .flatMap(_.words.map(_ -> 1L))
      .reduceByKey(_ + _)
      .collect()
      .sortBy(-_._2)


  //   vocabArray: Chosen vocab (removing common terms)
  val numStopwords = 100
  val vocabArray: Array[String] =
    termCounts
      .takeRight(termCounts.size - numStopwords)
      .map(_._1)


  //   vocab: Map term -> term index
  val vocab: Map[String, Int] = vocabArray.zipWithIndex.toMap

  val indexes: RDD[(Long, String)] = tokenized.zipWithIndex().map { case (tokens, id) =>
    (id, tokens.id)
  }

  // Convert documents into term count vectors
  val documents: RDD[(Long, Vector)] =
    tokenized.zipWithIndex().map { case (tokens, id) =>
      val counts = new mutable.HashMap[Int, Double]()
      tokens.words.foreach { term =>
        if (vocab.contains(term)) {
          val idx = vocab(term)
          counts(idx) = counts.getOrElse(idx, 0.0) + 1.0
        }
      }
      (id, Vectors.sparse(vocab.size, counts.toSeq))
    }

  //val test = indexes.join(documents).map { case (_, (docId, vec)) => docId -> vec }.collect()


  val lda = new LDA().setK(numTopics).setMaxIterations(maxIterations)

  val ldaModel = lda.run(documents)
  //val avgLogLikelihood = ldaModel.logLikelihood / documents.count()

  // Write topics, showing top-weighted 20 terms for each topic.
  var counter = -1
  val topicIndices = ldaModel.describeTopics(maxTermsPerTopic = 20)
  val topics: Array[(Int, String, Double)] = topicIndices.flatMap { case (terms, termWeights) =>
    counter = counter + 1
    terms.zip(termWeights).map { case (term, weight) =>
      (counter, vocabArray(term.toInt), weight)
    }
  }

  val topicDist = ldaModel.topicDistributions
  val articles = indexes.join(topicDist).map { case (_, (docId, topics)) =>
    val topTopics = topics.toArray.zipWithIndex
      .filter(_._1 >= 1.0 / numTopics)
      .sortBy(-_._1)
      .map { case (probability, topicID) =>
      (topicID, probability)
    }

    (docId, topTopics)
  }

  val articleText = for {
    article <- articles
    topic <- article._2
  } yield (article._1, topic._1, topic._2)

  // Output everything to files

  val path = s"output/Experiment $jobId/"

  articleText.saveAsTextFile(path + "clustering")

  val topicsFile = new java.io.FileWriter(path + "topics.txt")
  topics.foreach{case (topicId, word, weight) => topicsFile.write(s"$topicId, $word, $weight \n")}
  topicsFile.close()

  // Add info about the job
  val infoFile = new java.io.FileWriter(path + "info.json")
  infoFile.write(writePretty(JobDistribution(jobId, jobQuery, jobDescription, numTopics, maxIterations)))
  infoFile.close()

  sc.stop()
}