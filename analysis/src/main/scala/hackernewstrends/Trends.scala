package hackernewstrends

import scala.collection.mutable
import org.apache.spark.rdd.RDD
import org.apache.spark.SparkContext
import org.apache.spark.mllib.clustering.LDA
import org.apache.spark.mllib.linalg.{Vector, Vectors}

object Trends extends App {
  val sc = new SparkContext("local", "Main")

  // Load all the files generated by the crawler and split each line (each line contains one article)
  val corpus: RDD[String] = sc.wholeTextFiles("articles/*").flatMap { case (path, file) =>
    file.split("}}")
  }

  // Load the stop words
  // List found on: http://jmlr.org/papers/volume5/lewis04a/a11-smart-stop-list/english.stop
  val stream = getClass.getResourceAsStream("/english.stop")
  val stopWords = scala.io.Source.fromInputStream(stream).getLines().toList


  // Split each document into a sequence of terms (words)
  // Filter out the stop words
  val tokenized: RDD[Seq[String]] = corpus.map( page => page.toLowerCase.split("\\s+")).map { word =>
    word
      .filter(_.length > 3) // Only words that are longer than 3 characters
      .filter(_.forall(java.lang.Character.isLetter)) // Only letters
      .filter(!stopWords.contains(_)) // Filter out the stop-words
  }

  // Choose the vocabulary.

  //   termCounts: Sorted list of (term, termCount) pairs
  val termCounts: Array[(String, Long)] =
    tokenized
      .flatMap(_.map(_ -> 1L))
      .reduceByKey(_ + _)
      .collect()
      .sortBy(-_._2)


  //   vocabArray: Chosen vocab (removing common terms)
  val numStopwords = 20
  val vocabArray: Array[String] =
    termCounts
      .takeRight(termCounts.size - numStopwords)
      .map(_._1)


  //   vocab: Map term -> term index
  val vocab: Map[String, Int] = vocabArray.zipWithIndex.toMap

  // Convert documents into term count vectors
  val documents: RDD[(Long, Vector)] =
    tokenized.zipWithIndex().map { case (tokens, id) =>
      val counts = new mutable.HashMap[Int, Double]()
      tokens.foreach { term =>
        if (vocab.contains(term)) {
          val idx = vocab(term)
          counts(idx) = counts.getOrElse(idx, 0.0) + 1.0
        }
      }
      (id, Vectors.sparse(vocab.size, counts.toSeq))
    }

  // Set LDA parameters
  val numTopics = 50
  val lda = new LDA().setK(numTopics).setMaxIterations(50)

  val ldaModel = lda.run(documents)
  val avgLogLikelihood = ldaModel.logLikelihood / documents.count()

  // Print topics, showing top-weighted 10 terms for each topic.
  val topicIndices = ldaModel.describeTopics(maxTermsPerTopic = 10)
  topicIndices.foreach { case (terms, termWeights) =>
    println("TOPIC:")
    terms.zip(termWeights).foreach { case (term, weight) =>
      println(s"${vocabArray(term.toInt)}\t$weight")
    }
    println()
  }
}
